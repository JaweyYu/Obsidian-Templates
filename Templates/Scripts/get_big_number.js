// const map = `
// ╔|══════|══════|══════|══════|══════|══════|══════|══════|══════|══════|══════|══════|══════|══════|══════|╗
// ║| ████ |  ██  | ████ | ████ | █  █ | ████ | ████ | ████ | ████ | ████ |      |      |      |      |      |║
// ║| █  █ |   █  |    █ |    █ | █  █ | █    | █    |    █ | █  █ | █  █ |  ██  |      |      |    █ |      |║
// ║| █  █ |   █  | ████ | ████ | █  █ | ████ | ████ |    █ | ████ | ████ |      | ████ |      |   █  |      |║
// ║| █  █ |   █  | █    |    █ | ████ |    █ | █  █ |   █  | █  █ |    █ |  ██  |      |      |  █   |      |║
// ║| ████ | ████ | ████ | ████ |    █ | ████ | ████ |   █  | ████ | ████ |      |      | ████ | █    |      |║
// ╚|══════|══════|══════|══════|══════|══════|══════|══════|══════|══════|══════|══════|══════|══════|══════|╝
// `.replace(/^\n|\n$/g, '')
// const dict = {}
// const keys = ['start', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', '-', '_', '/', ' ', 'end']
// keys.forEach(k=>{
//   dict[k] = []
// })
// map.split(/\n/g).forEach((line,lineNum)=>{
//   const letters = line.split(/\|/g)
//   letters.forEach((l,i)=>{
//     dict[keys[i]][lineNum] = l
//   })
// })
const dict = {
  "0": [
      "══════",
      " ████ ",
      " █  █ ",
      " █  █ ",
      " █  █ ",
      " ████ ",
      "══════"
  ],
  "1": [
      "══════",
      "  ██  ",
      "   █  ",
      "   █  ",
      "   █  ",
      " ████ ",
      "══════"
  ],
  "2": [
      "══════",
      " ████ ",
      "    █ ",
      " ████ ",
      " █    ",
      " ████ ",
      "══════"
  ],
  "3": [
      "══════",
      " ████ ",
      "    █ ",
      " ████ ",
      "    █ ",
      " ████ ",
      "══════"
  ],
  "4": [
      "══════",
      " █  █ ",
      " █  █ ",
      " █  █ ",
      " ████ ",
      "    █ ",
      "══════"
  ],
  "5": [
      "══════",
      " ████ ",
      " █    ",
      " ████ ",
      "    █ ",
      " ████ ",
      "══════"
  ],
  "6": [
      "══════",
      " ████ ",
      " █    ",
      " ████ ",
      " █  █ ",
      " ████ ",
      "══════"
  ],
  "7": [
      "══════",
      " ████ ",
      "    █ ",
      "    █ ",
      "   █  ",
      "   █  ",
      "══════"
  ],
  "8": [
      "══════",
      " ████ ",
      " █  █ ",
      " ████ ",
      " █  █ ",
      " ████ ",
      "══════"
  ],
  "9": [
      "══════",
      " ████ ",
      " █  █ ",
      " ████ ",
      "    █ ",
      " ████ ",
      "══════"
  ],
  "start": [
      "╔",
      "║",
      "║",
      "║",
      "║",
      "║",
      "╚"
  ],
  ":": [
      "══════",
      "      ",
      "  ██  ",
      "      ",
      "  ██  ",
      "      ",
      "══════"
  ],
  "-": [
      "══════",
      "      ",
      "      ",
      " ████ ",
      "      ",
      "      ",
      "══════"
  ],
  "_": [
      "══════",
      "      ",
      "      ",
      "      ",
      "      ",
      " ████ ",
      "══════"
  ],
  "/": [
      "══════",
      "      ",
      "    █ ",
      "   █  ",
      "  █   ",
      " █    ",
      "══════"
  ],
  " ": [
      "══════",
      "      ",
      "      ",
      "      ",
      "      ",
      "      ",
      "══════"
  ],
  "end": [
      "╗",
      "║",
      "║",
      "║",
      "║",
      "║",
      "╝"
  ]
}
const addNum = (arr, numName)=>{
  if(!dict[numName]) return
  dict[numName].forEach((line, i)=>{
    arr[i] = arr[i] ? arr[i]+line : line
  })
}
function get_big_number (number) {
  const strArr = []
  addNum(strArr, 'start')
  number.split('').forEach(n=>{
    addNum(strArr, n)
  })
  addNum(strArr, 'end')
  return strArr.join('\n')
}
module.exports = get_big_number;